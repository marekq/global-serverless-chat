AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  MyTable:
    Description: Name of the CloudFormation stack
    Type: String
    Default: geochat

  CreateDNSRecord: 
    Description: Environment type
    Default: Create
    Type: String
    AllowedValues: 
      - Create
      - DontCreate
    ConstraintDescription: CreateDNSRecord must specify Create or DontCreate

  Route53ZoneID:
    Description: The ID of your existing Route53 Hosted Zone that contains the DNS zone used for record creation
    Default: Z10JFS5G2BTRGW
    Type: String
  
  Subdomain:
    Description: The DNS subdomain of your existing Route53 Hosted Zone where records will be created
    Default: chat.marek.rocks
    Type: String    

Globals:
  Function:
    Environment:
      Variables:
        dynamotable: !Ref MyTable
    AutoPublishAlias: live
    ProvisionedConcurrencyConfig:
      ProvisionedConcurrentExecutions: 1
    Runtime: python3.8
    Tracing: Active
    ReservedConcurrentExecutions: 3

Conditions: 
  EnableDNSRecord: !Equals [ !Ref CreateDNSRecord, Create ]
  
Resources:
  frontend:
    Type: 'AWS::Serverless::Function'
    Properties:

      Events:
        GetHtml:
          Type: HttpApi
          Properties:
            Path: '/'
            Method: get
      Handler: frontend.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MyTable
      CodeUri: lambda/frontend
      Description: 'Serve HTML traffic through API Gateway'
      MemorySize: 512
      Timeout: 3

  backend:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: backend.handler
      Policies:
        - ComprehendReadOnly
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTable
      CodeUri: lambda/backend
      Description: 'Run Comprehend on the message to detect sentiment and write the record into DynamoDB'
      MemorySize: 512
      Timeout: 5
      Events:
        GetHtml:
          Type: HttpApi
          Properties:
            Path: '/'
            Method: post     

  dns:
    Type: AWS::Route53::RecordSet
    Condition: EnableDNSRecord
    Properties:
      HostedZoneId: !Ref Route53ZoneID
      Name: !Sub '${AWS::Region}.${Subdomain}'
      Type: CNAME
      TTL: '60'
      ResourceRecords:
      - !Sub '${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com'

Outputs:
  WebInterface:
    Value: !Sub 'https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/'

  Environment:
    Value: !Ref CreateDNSRecord

  DNS:    
    Condition: EnableDNSRecord
    Value: !Ref dns
  
  DynamoDBTable:
    Value: !Ref MyTable
