AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  StackName:
    Description: Name of the Cloudformation stack
    Type: String
    Default: chat-webpage

  MyTable:
    Description: Name of the DynamoDB table stack
    Type: String
    Default: geochat

  CreateDNSRecord: 
    Description: Create a public DNS record with Route53
    Default: DontCreate
    Type: String
    AllowedValues: 
      - Create
      - DontCreate
    ConstraintDescription: CreateDNSRecord must specify Create or DontCreate

  CreatePublicBucket: 
    Description: Create a public S3 bucket for the HTTP 301 redirect
    Default: DontCreate
    Type: String
    AllowedValues: 
      - Create
      - DontCreate
    ConstraintDescription: CreatePublicBucket must specify Create or DontCreate

  Route53ZoneID:
    Description: The ID of your existing Route53 Hosted Zone that contains the DNS zone used for record creation
    Default: Z10JFS5G2BTRGW
    Type: String
  
  Subdomain:
    Description: The DNS subdomain of your existing Route53 Hosted Zone where records will be created
    Default: chat.marek.rocks
    Type: String

Globals:
  Function:
    Environment:
      Variables:
        dynamotable: !Ref MyTable
    # commented this out for the time being as it slows down deploys significantly
    #
    # AutoPublishAlias: live
    # ProvisionedConcurrencyConfig:
    #   ProvisionedConcurrentExecutions: 1
    Runtime: python3.8
    Tracing: Active
    ReservedConcurrentExecutions: 3
    MemorySize: 512

Conditions: 
  EnableDNSRecord: !Equals [ !Ref CreateDNSRecord, Create ]
  EnablePublicBucket: !Equals [ !Ref CreatePublicBucket, Create ]
  
Resources:
  frontend:
    Type: 'AWS::Serverless::Function'
    Properties:

      Events:
        GetHtml:
          Type: HttpApi
          Properties:
            Path: '/'
            Method: get
      Handler: frontend.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MyTable
      CodeUri: lambda/frontend
      Description: 'Serve HTML traffic through API Gateway'
      Timeout: 3

  backend:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: backend.handler
      Policies:
        - ComprehendReadOnly
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTable
      CodeUri: lambda/backend
      Description: 'Run Comprehend on the message to detect sentiment and write the record into DynamoDB'
      Timeout: 5
      Events:
        GetHtml:
          Type: HttpApi
          Properties:
            Path: '/'
            Method: post     

  dns:
    Type: AWS::Route53::RecordSet
    Condition: EnableDNSRecord
    Properties:
      HostedZoneId: !Ref Route53ZoneID
      Name: !Sub '${AWS::Region}.${Subdomain}'
      Type: CNAME
      TTL: '60'
      ResourceRecords: 
      - !Sub '${Subdomain}.s3-website-eu-west-1.amazonaws.com'

  public301bucket:
    Type: AWS::S3::Bucket
    Condition: EnablePublicBucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub '${AWS::Region}.${Subdomain}'
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Sub '${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/'
          Protocol: https

Outputs:
  APIGateway:
    Value: !Sub 'https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/'

  WebInterface:
    Value: !Sub 'https://${AWS::Region}.${Subdomain}/'

  S3BucketURL:
    Value: !Sub 'https://${AWS::Region}.chat.marek.rocks.s3-website-${AWS::Region}.amazonaws.com'

  CreatedPublicDNS:    
    Value: !Ref CreateDNSRecord

  CreatedPublicBucket:
    Value: !Ref CreatePublicBucket
